package fis.test;
// Generated by ComTest BEGIN
import java.util.List;
import static org.junit.Assert.*;
import org.junit.*;
import fis.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2019.04.05 11:53:54 // Generated by ComTest
 *
 */
@SuppressWarnings("all")
public class FisTest {



  // Generated by ComTest BEGIN
  /** 
   * testGetUrheilijoita23 
   * @throws SailoException when error
   */
  @Test
  public void testGetUrheilijoita23() throws SailoException {    // Fis: 23
    Fis fis = new Fis(); 
    assertEquals("From: Fis line: 26", 0, fis.getUrheilijoita()); 
    fis.lueUrheilijatTiedostosta(); 
    assertEquals("From: Fis line: 28", true, fis.getUrheilijoita() > 0); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetUrheilijat40 
   * @throws SailoException when error
   */
  @Test
  public void testGetUrheilijat40() throws SailoException {    // Fis: 40
    Fis fis = new Fis(); 
    assertEquals("From: Fis line: 43", 0, fis.getUrheilijat().size()); 
    fis.lueUrheilijatTiedostosta(); 
    assertEquals("From: Fis line: 45", true, fis.getUrheilijat().size() > 0); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetUrheilija57 
   * @throws SailoException when error
   */
  @Test
  public void testGetUrheilija57() throws SailoException {    // Fis: 57
    Fis fis = new Fis(); 
    fis.lueTiedostoista(); 
    List<Tulos> seuranta = fis.getSeurantaTulokset(); 
    assertEquals("From: Fis line: 63", false, seuranta.get(0) == null); 
    assertEquals("From: Fis line: 64", false, fis.getUrheilija(seuranta.get(0)) == null); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetTulokset77 
   * @throws SailoException when error
   */
  @Test
  public void testGetTulokset77() throws SailoException {    // Fis: 77
    Fis fis = new Fis(); 
    Urheilija urheilija = new Urheilija(); 
    String rivi = "278,13th FIS points list 2018/2019,1,AL,O,219656,502468,AABERG,Filip,SWE,M,2001-10-19,Nolby Alpina,SWE,AABERG Filip,2001,191.08,1587,+,66.57,1817,,77.99,2430,,131.07,2036,*,,,"; 
    urheilija.parse(rivi); 
    Urheilija urheilija2 = new Urheilija(); 
    String rivi2 = "278,13th FIS points list 2018/2019,1,AL,O,219656,123456,AABERG,Filip,SWE,M,2001-10-19,Nolby Alpina,SWE,AABERG Filip,2001,191.08,1587,+,66.57,1817,,77.99,2430,,131.07,2036,*,,,"; 
    urheilija2.parse(rivi2); 
    int max = 3; 
    for (int i = 0; i < max; i++) {
    Tulos tulos = new Tulos(); 
    tulos.taytaMalliDatalla(); 
    fis.lisaa(urheilija, tulos); 
    }
    fis.lisaa(urheilija2, new Tulos());  // lisätään 4. tulos
    assertEquals("From: Fis line: 93", max, fis.getTulokset(urheilija).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetSeurantaTulokset104 
   * @throws SailoException when error
   */
  @Test
  public void testGetSeurantaTulokset104() throws SailoException {    // Fis: 104
    Fis fis = new Fis(); 
    assertEquals("From: Fis line: 107", 0, fis.getSeurantaTulokset().size()); 
    fis.lueTiedostoista(); 
    assertEquals("From: Fis line: 109", false, fis.getSeurantaTulokset().size() == 0); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTulosOtsakkeet125 */
  @Test
  public void testGetTulosOtsakkeet125() {    // Fis: 125
    Fis fis = new Fis(); 
    assertEquals("From: Fis line: 127", false, fis.getTulosOtsakkeet() == null); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa140 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa140() throws SailoException {    // Fis: 140
    Fis fis = new Fis(); 
    fis.lueTiedostoista(); 
    List<Urheilija> urheilijat = fis.getUrheilijat(); 
    assertEquals("From: Fis line: 146", false, urheilijat.size() == 0); 
    int i = fis.getTulokset(urheilijat.get(0)).size(); 
    fis.lisaa(urheilijat.get(0), new Tulos()); 
    assertEquals("From: Fis line: 149", true, fis.getTulokset(urheilijat.get(0)).size() == i+1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa162 */
  @Test
  public void testLisaa162() {    // Fis: 162
    Fis fis = new Fis(); 
    Urheilija urheilija = new Urheilija(); 
    assertEquals("From: Fis line: 165", false, fis.seurannassa(urheilija)); 
    fis.lisaa(urheilija); 
    assertEquals("From: Fis line: 167", true, fis.seurannassa(urheilija)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista181 */
  @Test
  public void testPoista181() {    // Fis: 181
    Fis fis = new Fis(); 
    Urheilija urheilija = new Urheilija(); 
    assertEquals("From: Fis line: 184", false, fis.seurannassa(urheilija)); 
    fis.lisaa(urheilija); 
    assertEquals("From: Fis line: 186", true, fis.seurannassa(urheilija)); 
    fis.poista(urheilija); 
    assertEquals("From: Fis line: 188", false, fis.seurannassa(urheilija)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista202 
   * @throws SailoException when error
   */
  @Test
  public void testPoista202() throws SailoException {    // Fis: 202
    Fis fis = new Fis(); 
    fis.lueTiedostoista(); 
    Urheilija urheilija = fis.getUrheilijat().get(0); 
    assertEquals("From: Fis line: 207", false, urheilija == null); 
    int i = fis.getTulokset(urheilija).size(); 
    Tulos tulos = new Tulos(); 
    fis.lisaa(urheilija, tulos); 
    assertEquals("From: Fis line: 211", i+1, fis.getTulokset(urheilija).size()); 
    fis.poista(tulos); 
    assertEquals("From: Fis line: 213", i, fis.getTulokset(urheilija).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testSeurannassa225 
   * @throws SailoException when error
   */
  @Test
  public void testSeurannassa225() throws SailoException {    // Fis: 225
    Fis fis = new Fis(); 
    fis.lueTiedostoista(); 
    Urheilija urheilija = fis.getUrheilijat().get(0); 
    boolean seurannassa = fis.seurannassa(urheilija); 
    fis.vaihdaSeuranta(urheilija); 
    assertEquals("From: Fis line: 232", false, fis.seurannassa(urheilija) == seurannassa); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testVaihdaSeuranta245 
   * @throws SailoException when error
   */
  @Test
  public void testVaihdaSeuranta245() throws SailoException {    // Fis: 245
    Fis fis = new Fis(); 
    fis.lueTiedostoista(); 
    Urheilija urheilija = fis.getUrheilijat().get(0); 
    boolean seurannassa = fis.seurannassa(urheilija); 
    fis.vaihdaSeuranta(urheilija); 
    assertEquals("From: Fis line: 252", false, fis.seurannassa(urheilija) == seurannassa); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testVaihdaSeuranta271 
   * @throws SailoException when error
   */
  @Test
  public void testVaihdaSeuranta271() throws SailoException {    // Fis: 271
    Fis fis = new Fis(); 
    fis.lueTiedostoista(); 
    Urheilija urheilija = fis.getUrheilijat().get(0); 
    boolean seurannassa = fis.seurannassa(urheilija); 
    Tulos tulos = new Tulos(); 
    fis.lisaa(urheilija, tulos); 
    fis.vaihdaSeuranta(tulos); 
    assertEquals("From: Fis line: 280", false, fis.seurannassa(urheilija) == seurannassa); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testOnkoMuutettu291 
   * @throws SailoException when error
   */
  @Test
  public void testOnkoMuutettu291() throws SailoException {    // Fis: 291
    Fis fis = new Fis(); 
    assertEquals("From: Fis line: 294", false, fis.onkoMuutettu()); 
    fis.lueTiedostoista(); 
    assertEquals("From: Fis line: 296", false, fis.onkoMuutettu()); 
    fis.lisaa(fis.getUrheilijat().get(10)); 
    assertEquals("From: Fis line: 298", true, fis.onkoMuutettu()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueUrheilijatTiedostosta311 
   * @throws SailoException when error
   */
  @Test
  public void testLueUrheilijatTiedostosta311() throws SailoException {    // Fis: 311
    Fis fis = new Fis(); 
    assertEquals("From: Fis line: 314", 0, fis.getUrheilijat().size()); 
    fis.lueUrheilijatTiedostosta(); 
    assertEquals("From: Fis line: 316", true, fis.getUrheilijat().size() > 0); 
  } // Generated by ComTest END
}